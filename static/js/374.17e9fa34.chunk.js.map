{"version":3,"file":"static/js/374.17e9fa34.chunk.js","mappings":"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","sources":["components/ShoppingCart/ShoppingCart.styled.js","components/ShoppingCart/ShoppingCart.js","components/FormComponent/Form.js","pages/ShoppingCart.js","redux/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CartProductsWrapper = styled.div`\n  width: 700px;\n  height: 350px;\n  overflow: scroll;\n  border: 1px solid black;\n\n  border: 1px solid black;\n  background-color: white;\n`;\nexport const StyledItem = styled.li`\n  display: flex;\n  gap: 20px;\n`;\n\nexport const CartProductsList = styled.ul`\n  list-style-type: none;\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n`;\n\nexport const ProductImgWrapper = styled.div`\n  width: 80px;\n  height: 120px;\n  overflow: hidden;\n  background-color: white;\n`;\n\nexport const ProductImage = styled.img`\n  width: 100%;\n  object-fit: cover;\n`;\nexport const StyledButton = styled.button`\n width: 100px;\n display:inline-block;\n  min-height: 20px;\n  background-color: blue;\n  color: white;\n  border: none;\n  cursor: pointer;\n  margin-right: 10px;\n  border-radius: 10px;\n  padding: 5px;\n  transition: all 0.3s ease;\n  margin-top: 15px;\n\n   &:hover {\n    background-color: darkblue;`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n","import { nanoid } from 'nanoid';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCartProducts } from 'redux/selectors';\nimport { changeQuantity, removeFromCart } from 'redux/cartProductsSlice';\nimport {\n  CartProductsWrapper,\n  CartProductsList,\n  ProductImgWrapper,\n  ProductImage,\n  StyledItem,\n  StyledButton,\n  InfoWrapper,\n} from './ShoppingCart.styled';\nexport const ShoppingCart = () => {\n  const dispatch = useDispatch();\n  const cartProducts = useSelector(selectCartProducts);\n\n  const handleQuantityChange = (quantity, productId) => {\n    dispatch(changeQuantity({ quantity, productId }));\n  };\n\n  const handleRemoveFromCart = productId => {\n    dispatch(removeFromCart(productId));\n  };\n  const calculateTotal = () => {\n    let total = 0;\n    cartProducts.forEach(product => {\n      total += product.price * product.quantity;\n    });\n    return total;\n  };\n\n  return (\n    <CartProductsWrapper>\n      <CartProductsList>\n        {cartProducts.map(product => (\n          <StyledItem key={nanoid()}>\n            <ProductImgWrapper>\n              <ProductImage src={product.url} alt={product.name} />\n            </ProductImgWrapper>\n            <InfoWrapper>\n              <h2>{product.name}</h2>\n              <p>Price:${product.price}</p>\n              <input\n                type=\"number\"\n                value={product.quantity || 0}\n                onChange={e =>\n                  handleQuantityChange(e.target.value, product._id)\n                }\n              />\n\n              <StyledButton onClick={() => handleRemoveFromCart(product._id)}>\n                Remove\n              </StyledButton>\n            </InfoWrapper>\n          </StyledItem>\n        ))}\n      </CartProductsList>\n      <p>Total: ${calculateTotal()}</p>\n    </CartProductsWrapper>\n  );\n};\n","import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nexport const FormComponent = ({ handleSubmit }) => {\n  return (\n    <div>\n      <h2>Checkout Form</h2>\n      <Formik\n        initialValues={{ name: '', email: '', phone: '', address: '' }}\n        validate={values => {\n          const errors = {};\n          if (!values.name) {\n            errors.name = 'Required';\n          }\n          return errors;\n        }}\n        onSubmit={handleSubmit}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <div>\n              <label htmlFor=\"name\">Name</label>\n              <Field type=\"text\" name=\"name\" />\n              <ErrorMessage name=\"name\" component=\"div\" />\n            </div>\n            <div>\n              <label htmlFor=\"email\">Email</label>\n              <Field type=\"email\" name=\"email\" />\n              <ErrorMessage name=\"email\" component=\"div\" />\n            </div>\n            <div>\n              <label htmlFor=\"phone\">Phone</label>\n              <Field type=\"text\" name=\"phone\" />\n              <ErrorMessage name=\"phone\" component=\"div\" />\n            </div>\n            <div>\n              <label htmlFor=\"address\">Address</label>\n              <Field type=\"text\" name=\"address\" />\n              <ErrorMessage name=\"address\" component=\"div\" />\n            </div>\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCartProducts } from 'redux/selectors';\nimport { removeAllFromCart } from 'redux/cartProductsSlice';\nimport { ShoppingCart } from 'components/ShoppingCart/ShoppingCart';\nimport { FormComponent } from 'components/FormComponent/Form';\nimport axios from 'axios';\nimport Notiflix from 'notiflix';\n\nexport default function CartPage() {\n  const cartProducts = useSelector(selectCartProducts);\n  const dispatch = useDispatch();\n  const handleSubmit = async (values, actions) => {\n    const formData = values;\n\n    const productsData = cartProducts.map(product => ({\n      name: product.name,\n      id: product._id,\n      shopId: product.shopId,\n      quantity: product.quantity,\n    }));\n\n    const orderData = {\n      clientData: {\n        name: formData.name,\n        email: formData.email,\n        phone: formData.phone,\n        address: formData.address,\n      },\n      products: productsData,\n    };\n    try {\n      await axios.post(\n        'https://delivery-app-backend-nwp2.onrender.com/api/orders',\n        orderData\n      );\n      Notiflix.Notify.success('Your order was added successfully');\n      actions.resetForm();\n      dispatch(removeAllFromCart());\n    } catch (error) {\n      Notiflix.Notify.failure(error);\n    }\n  };\n\n  return (\n    <div>\n      <FormComponent handleSubmit={handleSubmit} />\n      <ShoppingCart />\n    </div>\n  );\n}\n","export const selectCartProducts = state => state.cartProducts.products;\n"],"names":["CartProductsWrapper","styled","_templateObject","_taggedTemplateLiteral","StyledItem","_templateObject2","CartProductsList","_templateObject3","ProductImgWrapper","_templateObject4","ProductImage","_templateObject5","StyledButton","_templateObject6","InfoWrapper","_templateObject7","ShoppingCart","dispatch","useDispatch","cartProducts","useSelector","selectCartProducts","_jsxs","children","_jsx","map","product","src","url","alt","name","price","type","value","quantity","onChange","e","target","productId","_id","changeQuantity","onClick","removeFromCart","nanoid","total","forEach","calculateTotal","FormComponent","_ref","handleSubmit","Formik","initialValues","email","phone","address","validate","values","errors","onSubmit","_ref2","isSubmitting","Form","htmlFor","Field","ErrorMessage","component","disabled","CartPage","_asyncToGenerator","_regeneratorRuntime","_callee","actions","formData","productsData","orderData","_context","prev","next","id","shopId","clientData","products","axios","Notiflix","resetForm","removeAllFromCart","t0","stop","_x","_x2","apply","arguments","state"],"sourceRoot":""}